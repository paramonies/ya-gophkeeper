// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/gophkeeper/v1/card_service.proto

package gophkeeper

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateCardRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateCardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCardRequestMultiError, or nil if none found.
func (m *CreateCardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Number

	// no validation rules for Owner

	// no validation rules for ExpDate

	// no validation rules for Cvv

	// no validation rules for Meta

	// no validation rules for Version

	if len(errors) > 0 {
		return CreateCardRequestMultiError(errors)
	}

	return nil
}

// CreateCardRequestMultiError is an error wrapping multiple validation errors
// returned by CreateCardRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateCardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCardRequestMultiError) AllErrors() []error { return m }

// CreateCardRequestValidationError is the validation error returned by
// CreateCardRequest.Validate if the designated constraints aren't met.
type CreateCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCardRequestValidationError) ErrorName() string {
	return "CreateCardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCardRequestValidationError{}

// Validate checks the field values on CreateCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCardResponseMultiError, or nil if none found.
func (m *CreateCardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return CreateCardResponseMultiError(errors)
	}

	return nil
}

// CreateCardResponseMultiError is an error wrapping multiple validation errors
// returned by CreateCardResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateCardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCardResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCardResponseMultiError) AllErrors() []error { return m }

// CreateCardResponseValidationError is the validation error returned by
// CreateCardResponse.Validate if the designated constraints aren't met.
type CreateCardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCardResponseValidationError) ErrorName() string {
	return "CreateCardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCardResponseValidationError{}

// Validate checks the field values on GetCardRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetCardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCardRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetCardRequestMultiError,
// or nil if none found.
func (m *GetCardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Number

	if len(errors) > 0 {
		return GetCardRequestMultiError(errors)
	}

	return nil
}

// GetCardRequestMultiError is an error wrapping multiple validation errors
// returned by GetCardRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCardRequestMultiError) AllErrors() []error { return m }

// GetCardRequestValidationError is the validation error returned by
// GetCardRequest.Validate if the designated constraints aren't met.
type GetCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCardRequestValidationError) ErrorName() string { return "GetCardRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCardRequestValidationError{}

// Validate checks the field values on GetCardResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCardResponseMultiError, or nil if none found.
func (m *GetCardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Number

	// no validation rules for Owner

	// no validation rules for ExpDate

	// no validation rules for Cvv

	// no validation rules for Meta

	// no validation rules for Version

	if len(errors) > 0 {
		return GetCardResponseMultiError(errors)
	}

	return nil
}

// GetCardResponseMultiError is an error wrapping multiple validation errors
// returned by GetCardResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCardResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCardResponseMultiError) AllErrors() []error { return m }

// GetCardResponseValidationError is the validation error returned by
// GetCardResponse.Validate if the designated constraints aren't met.
type GetCardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCardResponseValidationError) ErrorName() string { return "GetCardResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetCardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCardResponseValidationError{}

// Validate checks the field values on DeleteCardRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteCardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCardRequestMultiError, or nil if none found.
func (m *DeleteCardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Number

	if len(errors) > 0 {
		return DeleteCardRequestMultiError(errors)
	}

	return nil
}

// DeleteCardRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteCardRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteCardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCardRequestMultiError) AllErrors() []error { return m }

// DeleteCardRequestValidationError is the validation error returned by
// DeleteCardRequest.Validate if the designated constraints aren't met.
type DeleteCardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCardRequestValidationError) ErrorName() string {
	return "DeleteCardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCardRequestValidationError{}

// Validate checks the field values on DeleteCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCardResponseMultiError, or nil if none found.
func (m *DeleteCardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return DeleteCardResponseMultiError(errors)
	}

	return nil
}

// DeleteCardResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteCardResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteCardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCardResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCardResponseMultiError) AllErrors() []error { return m }

// DeleteCardResponseValidationError is the validation error returned by
// DeleteCardResponse.Validate if the designated constraints aren't met.
type DeleteCardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCardResponseValidationError) ErrorName() string {
	return "DeleteCardResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCardResponseValidationError{}
