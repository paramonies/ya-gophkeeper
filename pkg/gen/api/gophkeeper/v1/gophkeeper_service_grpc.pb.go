// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/gophkeeper/v1/gophkeeper_service.proto

package gophkeeper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GophkeeperServiceClient is the client API for GophkeeperService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GophkeeperServiceClient interface {
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
}

type gophkeeperServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGophkeeperServiceClient(cc grpc.ClientConnInterface) GophkeeperServiceClient {
	return &gophkeeperServiceClient{cc}
}

func (c *gophkeeperServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, "/proto.GophkeeperService/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GophkeeperServiceServer is the server API for GophkeeperService service.
// All implementations should embed UnimplementedGophkeeperServiceServer
// for forward compatibility
type GophkeeperServiceServer interface {
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
}

// UnimplementedGophkeeperServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGophkeeperServiceServer struct {
}

func (UnimplementedGophkeeperServiceServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}

// UnsafeGophkeeperServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GophkeeperServiceServer will
// result in compilation errors.
type UnsafeGophkeeperServiceServer interface {
	mustEmbedUnimplementedGophkeeperServiceServer()
}

func RegisterGophkeeperServiceServer(s grpc.ServiceRegistrar, srv GophkeeperServiceServer) {
	s.RegisterService(&GophkeeperService_ServiceDesc, srv)
}

func _GophkeeperService_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GophkeeperService/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServiceServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GophkeeperService_ServiceDesc is the grpc.ServiceDesc for GophkeeperService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GophkeeperService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GophkeeperService",
	HandlerType: (*GophkeeperServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _GophkeeperService_RegisterUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/gophkeeper/v1/gophkeeper_service.proto",
}
