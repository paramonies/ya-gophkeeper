// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/gophkeeper/v1/text_service.proto

package gophkeeper

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateTextRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateTextRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTextRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTextRequestMultiError, or nil if none found.
func (m *CreateTextRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTextRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Data

	// no validation rules for Meta

	// no validation rules for Version

	if len(errors) > 0 {
		return CreateTextRequestMultiError(errors)
	}

	return nil
}

// CreateTextRequestMultiError is an error wrapping multiple validation errors
// returned by CreateTextRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateTextRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTextRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTextRequestMultiError) AllErrors() []error { return m }

// CreateTextRequestValidationError is the validation error returned by
// CreateTextRequest.Validate if the designated constraints aren't met.
type CreateTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTextRequestValidationError) ErrorName() string {
	return "CreateTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTextRequestValidationError{}

// Validate checks the field values on CreateTextResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateTextResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateTextResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateTextResponseMultiError, or nil if none found.
func (m *CreateTextResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateTextResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return CreateTextResponseMultiError(errors)
	}

	return nil
}

// CreateTextResponseMultiError is an error wrapping multiple validation errors
// returned by CreateTextResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateTextResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateTextResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateTextResponseMultiError) AllErrors() []error { return m }

// CreateTextResponseValidationError is the validation error returned by
// CreateTextResponse.Validate if the designated constraints aren't met.
type CreateTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTextResponseValidationError) ErrorName() string {
	return "CreateTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTextResponseValidationError{}

// Validate checks the field values on GetTextRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTextRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTextRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTextRequestMultiError,
// or nil if none found.
func (m *GetTextRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTextRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	if len(errors) > 0 {
		return GetTextRequestMultiError(errors)
	}

	return nil
}

// GetTextRequestMultiError is an error wrapping multiple validation errors
// returned by GetTextRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTextRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTextRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTextRequestMultiError) AllErrors() []error { return m }

// GetTextRequestValidationError is the validation error returned by
// GetTextRequest.Validate if the designated constraints aren't met.
type GetTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTextRequestValidationError) ErrorName() string { return "GetTextRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTextRequestValidationError{}

// Validate checks the field values on GetTextResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTextResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTextResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTextResponseMultiError, or nil if none found.
func (m *GetTextResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTextResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Data

	// no validation rules for Meta

	// no validation rules for Version

	if len(errors) > 0 {
		return GetTextResponseMultiError(errors)
	}

	return nil
}

// GetTextResponseMultiError is an error wrapping multiple validation errors
// returned by GetTextResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTextResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTextResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTextResponseMultiError) AllErrors() []error { return m }

// GetTextResponseValidationError is the validation error returned by
// GetTextResponse.Validate if the designated constraints aren't met.
type GetTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTextResponseValidationError) ErrorName() string { return "GetTextResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTextResponseValidationError{}

// Validate checks the field values on DeleteTextRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteTextRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTextRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTextRequestMultiError, or nil if none found.
func (m *DeleteTextRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTextRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	if len(errors) > 0 {
		return DeleteTextRequestMultiError(errors)
	}

	return nil
}

// DeleteTextRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteTextRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteTextRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTextRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTextRequestMultiError) AllErrors() []error { return m }

// DeleteTextRequestValidationError is the validation error returned by
// DeleteTextRequest.Validate if the designated constraints aren't met.
type DeleteTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTextRequestValidationError) ErrorName() string {
	return "DeleteTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTextRequestValidationError{}

// Validate checks the field values on DeleteTextResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteTextResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteTextResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteTextResponseMultiError, or nil if none found.
func (m *DeleteTextResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteTextResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return DeleteTextResponseMultiError(errors)
	}

	return nil
}

// DeleteTextResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteTextResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteTextResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteTextResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteTextResponseMultiError) AllErrors() []error { return m }

// DeleteTextResponseValidationError is the validation error returned by
// DeleteTextResponse.Validate if the designated constraints aren't met.
type DeleteTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteTextResponseValidationError) ErrorName() string {
	return "DeleteTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteTextResponseValidationError{}
