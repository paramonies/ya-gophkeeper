// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/gophkeeper/v1/binary_service.proto

package gophkeeper

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BinaryServiceClient is the client API for BinaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BinaryServiceClient interface {
	CreateBinary(ctx context.Context, in *CreateBinaryRequest, opts ...grpc.CallOption) (*CreateBinaryResponse, error)
	GetBinary(ctx context.Context, in *GetBinaryRequest, opts ...grpc.CallOption) (*GetBinaryResponse, error)
	DeleteBinary(ctx context.Context, in *DeleteBinaryRequest, opts ...grpc.CallOption) (*DeleteBinaryResponse, error)
}

type binaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBinaryServiceClient(cc grpc.ClientConnInterface) BinaryServiceClient {
	return &binaryServiceClient{cc}
}

func (c *binaryServiceClient) CreateBinary(ctx context.Context, in *CreateBinaryRequest, opts ...grpc.CallOption) (*CreateBinaryResponse, error) {
	out := new(CreateBinaryResponse)
	err := c.cc.Invoke(ctx, "/proto.BinaryService/CreateBinary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binaryServiceClient) GetBinary(ctx context.Context, in *GetBinaryRequest, opts ...grpc.CallOption) (*GetBinaryResponse, error) {
	out := new(GetBinaryResponse)
	err := c.cc.Invoke(ctx, "/proto.BinaryService/GetBinary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *binaryServiceClient) DeleteBinary(ctx context.Context, in *DeleteBinaryRequest, opts ...grpc.CallOption) (*DeleteBinaryResponse, error) {
	out := new(DeleteBinaryResponse)
	err := c.cc.Invoke(ctx, "/proto.BinaryService/DeleteBinary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BinaryServiceServer is the server API for BinaryService service.
// All implementations should embed UnimplementedBinaryServiceServer
// for forward compatibility
type BinaryServiceServer interface {
	CreateBinary(context.Context, *CreateBinaryRequest) (*CreateBinaryResponse, error)
	GetBinary(context.Context, *GetBinaryRequest) (*GetBinaryResponse, error)
	DeleteBinary(context.Context, *DeleteBinaryRequest) (*DeleteBinaryResponse, error)
}

// UnimplementedBinaryServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBinaryServiceServer struct {
}

func (UnimplementedBinaryServiceServer) CreateBinary(context.Context, *CreateBinaryRequest) (*CreateBinaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBinary not implemented")
}
func (UnimplementedBinaryServiceServer) GetBinary(context.Context, *GetBinaryRequest) (*GetBinaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBinary not implemented")
}
func (UnimplementedBinaryServiceServer) DeleteBinary(context.Context, *DeleteBinaryRequest) (*DeleteBinaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBinary not implemented")
}

// UnsafeBinaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BinaryServiceServer will
// result in compilation errors.
type UnsafeBinaryServiceServer interface {
	mustEmbedUnimplementedBinaryServiceServer()
}

func RegisterBinaryServiceServer(s grpc.ServiceRegistrar, srv BinaryServiceServer) {
	s.RegisterService(&BinaryService_ServiceDesc, srv)
}

func _BinaryService_CreateBinary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateBinaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryServiceServer).CreateBinary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BinaryService/CreateBinary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryServiceServer).CreateBinary(ctx, req.(*CreateBinaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinaryService_GetBinary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBinaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryServiceServer).GetBinary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BinaryService/GetBinary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryServiceServer).GetBinary(ctx, req.(*GetBinaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BinaryService_DeleteBinary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteBinaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BinaryServiceServer).DeleteBinary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BinaryService/DeleteBinary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BinaryServiceServer).DeleteBinary(ctx, req.(*DeleteBinaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BinaryService_ServiceDesc is the grpc.ServiceDesc for BinaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BinaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BinaryService",
	HandlerType: (*BinaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateBinary",
			Handler:    _BinaryService_CreateBinary_Handler,
		},
		{
			MethodName: "GetBinary",
			Handler:    _BinaryService_GetBinary_Handler,
		},
		{
			MethodName: "DeleteBinary",
			Handler:    _BinaryService_DeleteBinary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/gophkeeper/v1/binary_service.proto",
}
