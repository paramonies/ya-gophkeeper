// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/gophkeeper/v1/binary_service.proto

package gophkeeper

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateBinaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBinaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBinaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBinaryRequestMultiError, or nil if none found.
func (m *CreateBinaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBinaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Data

	// no validation rules for Meta

	// no validation rules for Version

	if len(errors) > 0 {
		return CreateBinaryRequestMultiError(errors)
	}

	return nil
}

// CreateBinaryRequestMultiError is an error wrapping multiple validation
// errors returned by CreateBinaryRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBinaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBinaryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBinaryRequestMultiError) AllErrors() []error { return m }

// CreateBinaryRequestValidationError is the validation error returned by
// CreateBinaryRequest.Validate if the designated constraints aren't met.
type CreateBinaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBinaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBinaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBinaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBinaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBinaryRequestValidationError) ErrorName() string {
	return "CreateBinaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBinaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBinaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBinaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBinaryRequestValidationError{}

// Validate checks the field values on CreateBinaryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBinaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBinaryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBinaryResponseMultiError, or nil if none found.
func (m *CreateBinaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBinaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return CreateBinaryResponseMultiError(errors)
	}

	return nil
}

// CreateBinaryResponseMultiError is an error wrapping multiple validation
// errors returned by CreateBinaryResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateBinaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBinaryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBinaryResponseMultiError) AllErrors() []error { return m }

// CreateBinaryResponseValidationError is the validation error returned by
// CreateBinaryResponse.Validate if the designated constraints aren't met.
type CreateBinaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBinaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBinaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBinaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBinaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBinaryResponseValidationError) ErrorName() string {
	return "CreateBinaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBinaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBinaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBinaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBinaryResponseValidationError{}

// Validate checks the field values on GetBinaryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBinaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBinaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBinaryRequestMultiError, or nil if none found.
func (m *GetBinaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBinaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	if len(errors) > 0 {
		return GetBinaryRequestMultiError(errors)
	}

	return nil
}

// GetBinaryRequestMultiError is an error wrapping multiple validation errors
// returned by GetBinaryRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBinaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBinaryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBinaryRequestMultiError) AllErrors() []error { return m }

// GetBinaryRequestValidationError is the validation error returned by
// GetBinaryRequest.Validate if the designated constraints aren't met.
type GetBinaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBinaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBinaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBinaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBinaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBinaryRequestValidationError) ErrorName() string { return "GetBinaryRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetBinaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBinaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBinaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBinaryRequestValidationError{}

// Validate checks the field values on GetBinaryResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBinaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBinaryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBinaryResponseMultiError, or nil if none found.
func (m *GetBinaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBinaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Data

	// no validation rules for Meta

	// no validation rules for Version

	if len(errors) > 0 {
		return GetBinaryResponseMultiError(errors)
	}

	return nil
}

// GetBinaryResponseMultiError is an error wrapping multiple validation errors
// returned by GetBinaryResponse.ValidateAll() if the designated constraints
// aren't met.
type GetBinaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBinaryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBinaryResponseMultiError) AllErrors() []error { return m }

// GetBinaryResponseValidationError is the validation error returned by
// GetBinaryResponse.Validate if the designated constraints aren't met.
type GetBinaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBinaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBinaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBinaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBinaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBinaryResponseValidationError) ErrorName() string {
	return "GetBinaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBinaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBinaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBinaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBinaryResponseValidationError{}

// Validate checks the field values on DeleteBinaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBinaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBinaryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBinaryRequestMultiError, or nil if none found.
func (m *DeleteBinaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBinaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	if len(errors) > 0 {
		return DeleteBinaryRequestMultiError(errors)
	}

	return nil
}

// DeleteBinaryRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteBinaryRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteBinaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBinaryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBinaryRequestMultiError) AllErrors() []error { return m }

// DeleteBinaryRequestValidationError is the validation error returned by
// DeleteBinaryRequest.Validate if the designated constraints aren't met.
type DeleteBinaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBinaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBinaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBinaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBinaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBinaryRequestValidationError) ErrorName() string {
	return "DeleteBinaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBinaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBinaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBinaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBinaryRequestValidationError{}

// Validate checks the field values on DeleteBinaryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteBinaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteBinaryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteBinaryResponseMultiError, or nil if none found.
func (m *DeleteBinaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteBinaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if len(errors) > 0 {
		return DeleteBinaryResponseMultiError(errors)
	}

	return nil
}

// DeleteBinaryResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteBinaryResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteBinaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteBinaryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteBinaryResponseMultiError) AllErrors() []error { return m }

// DeleteBinaryResponseValidationError is the validation error returned by
// DeleteBinaryResponse.Validate if the designated constraints aren't met.
type DeleteBinaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteBinaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteBinaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteBinaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteBinaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteBinaryResponseValidationError) ErrorName() string {
	return "DeleteBinaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteBinaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteBinaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteBinaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteBinaryResponseValidationError{}
